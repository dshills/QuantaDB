version: "2"

# Timeout for analysis
run:
  # Timeout for linter (default is 1m)
  timeout: 5m
  # Go version to use for type checking
  go: '1.24.4'
  # Include test files
  tests: true
  # Skip vendor, third party, etc.
  skip-dirs-use-default: true
  # Skip directories with multiple main functions
  skip-dirs:
    - cmd/test-tools
    - test
  # Or use exclude patterns
  exclude-dirs:
    - cmd/test-tools
    - test

# Linter settings
linters:
  # Start with default linters (enable commonly used ones)
  default: standard

  # Enable additional linters
  enable:
    # Code quality
    - dogsled       # Checks for too many blank identifiers
    - dupl          # Code duplication detector
    - goconst       # Finds repeated strings that could be constants
    - nakedret      # Naked returns in long functions
    - unconvert     # Remove unnecessary type conversions
    - whitespace    # Detects leading/trailing whitespace

    # Security
    - gosec         # Inspects source for security problems

    # Performance
    - bodyclose     # Checks HTTP response body is closed

    # Style
    - revive        # Fast, configurable linter

    # Bugs/Correctness
    - staticcheck   # Advanced static analysis (includes gosimple, stylecheck)
    - loggercheck   # Checks logger arguments
    - exhaustive    # Check exhaustiveness of enum switches

  # Disable overly aggressive linters for database projects
  disable:
    - errcheck      # Can be noisy, enable selectively
    - unparam       # Database interfaces need consistent signatures
    - prealloc      # Query processing uses dynamic structures
    - nilnil        # Common pattern in iterators: return nil, nil
    - misspell      # Spell checker
    - unused

  # Linter-specific settings
  settings:
    # Configure exhaustive
    exhaustive:
      # Only check switches on types with explicit enumeration values
      check-generated: false
      # Allow switches that have a default case
      default-signifies-exhaustive: true

    # Configure revive with less aggressive rules
    revive:
      rules:
        - name: blank-imports
        - name: context-as-argument
        - name: context-keys-type
        - name: dot-imports
        - name: error-return
        - name: error-strings
        - name: error-naming
        # - name: exported           # Too strict for internal packages
        - name: if-return
        - name: increment-decrement
        - name: var-naming
        - name: var-declaration
        # - name: package-comments   # Not all packages need comments
        - name: range
        - name: receiver-naming
        - name: time-naming
        - name: unexported-return
        - name: indent-error-flow
        - name: errorf

    # Configure staticcheck
    staticcheck:
      checks:
        - all
        - '-SA1019'  # Ignore deprecation warnings if needed

    # Configure goconst with more reasonable thresholds
    goconst:
      min-len: 10           # Increased from 3 - avoid flagging SQL keywords
      min-occurrences: 5    # Increased from 3 - more reasonable threshold

    # Configure dupl with higher threshold for database code
    dupl:
      threshold: 150        # Increased from 100 - database code has legitimate patterns

    # Configure misspell
    misspell:
      locale: US

    # Configure gosec
    gosec:
      excludes:
        - G204  # Subprocess launch with variable

    # Configure govet
    govet:
      enable-all: true
      disable:
        - shadow        # Can be noisy
        - fieldalignment # Struct field alignment optimization suggestions

  # Exclusion rules
  exclusions:
    # Handle generated files
    generated: lax

    # Use default exclusion presets
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling

    # Path exclusions
    paths:
      - third_party$
      - builtin$
      - examples$
      - vendor$

    # Custom exclusion rules
    rules:
      # Ignore certain linters in test files
      - path: '(.+)_test\.go'
        linters:
          - dupl
          - goconst
          - gosec

      # Ignore dupl in operator implementations (common patterns)
      - path: 'internal/sql/executor/.*operator.*\.go'
        linters:
          - dupl

      # Ignore dupl in planner (similar patterns for different node types)
      - path: 'internal/sql/planner/.*\.go'
        text: 'duplicate of'
        linters:
          - dupl

      # Ignore goconst for common SQL keywords
      - path: 'internal/sql/.*\.go'
        text: 'string "(SELECT|FROM|WHERE|JOIN|ON|AND|OR|NOT|IN|EXISTS|GROUP BY|ORDER BY|LIMIT|OFFSET|ASC|DESC)"'
        linters:
          - goconst

      # Ignore long lines in generated files
      - path: '(.+)\.pb\.go'
        linters:
          - lll

      # Ignore certain error checks in main
      - path: 'main\.go'
        text: 'Error return value of .* is not checked'

      # Ignore nilnil in iterators (common pattern)
      - path: 'internal/.*iterator.*\.go'
        text: 'return both the `nil` error and invalid value'

      # Ignore nilnil in Next() methods
      - path: '.*\.go'
        text: 'return both the `nil` error and invalid value'
        source: 'return nil, nil.*// EOF'

# Code formatters
formatters:
  enable:
    - gofmt       # Standard Go formatter
    - goimports   # Organize imports

  settings:
    gofmt:
      simplify: true

    goimports:
      local-prefixes: github.com/dshills/QuantaDB

  exclusions:
    paths:
      - third_party$
      - vendor$
      - '(.+)\.pb\.go'

# Output configuration
output:
  formats:
    # Default colored text output
    text:
      path: stdout
      color: true

    # JSON output for CI/CD integration
    # json:
    #   path: golangci-report.json

    # Checkstyle for integration with other tools
    # checkstyle:
    #   path: checkstyle.xml

# Issue reporting settings
issues:
  # Maximum issues per linter
  max-issues-per-linter: 50

  # Maximum same issues
  max-same-issues: 3

  # Show all issues from a linter
  whole-files: false

  # Fix found issues (if supported by linter)
  fix: false
